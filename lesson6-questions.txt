Questions for Lesson 6

1. When you enable CRUD operations on a table in the database, you need to add four things
to your Rails application.  When you generate a scaffold, all four are created.What are they?
Ans: The migration file, the model, the route and the controller



2. When you specify a route in config/routes.rb, you need to include certain information.  What
must be included? In addition, you may specify an additional parameter to create a variable
that describes the route.  How do you do that? What variable is created?
Ans: When specifying a route in config/routes.rb, a HTTP verb, a path and controller/action must be
included. To create a variable (route parameter), include it in the path as :parameter_name,
and it will be available in the controllerâ€™s action via params[:parameter_name].

3. What does the Rails db:migrate command do?
Ans: It is used to apply database migration if there're any changes on the database


4. What file do you look at to see the current database schema?
Ans: db/schema.rb

5. What command shows the routes?
Ans: bin/rails routes

6. How can you start the Rails console? How can you do CRUD operations from the console?
Ans: `rails console` to start the Rails console.
To do CRUD operations from the console:
Create: User.new(attributes).save or User.create(attributes)
Read: User.all, User.find(id), User.find_by(attribute: value), User.where(condition)
Update: user.update(attributes) or user.attribute = value; user.save
Delete: user.destroy or user.delete


7. What statements are in erb files that make them different from html files?  What are the
two kinds of special statements, and how are they marked in the erb file? Where are they executed?
Ans: They contain Ruby code that is executed in the server side before the HTML is sent to the client's
browser
There are two main types of special statements in ERB files:
- Output statements (<%= %>): Used to insert the result of Ruby expressions into the HTML.
- Script statements (<% %>): Used to execute Ruby code without inserting its result into the HTML.
They are executed on the server side of Ruby

8. Consider this statement: @forum = Forum.new().  Why is Forum capitalized?  Why is @forum not
capitalized? Why is the @ used?
Ans: Forum is capitalized because it is a class name. @forum is not because it is an instance variable. 
The @ is used to indicate that `forum` is an instance variable. 


9. Consider these statements:

@forum = Forum.new(...)
@forum =Forum.create(...)
@forum.save(...)

What is the difference between Forum.new() and Forum.create()?  Why can't you do Forum.save(...)?
Ans: 
Forum.new() is to create a new instance of the Forum class, but it does not save it to the database
Forum.create() do the action of Forum.new() and Forum.save() in one step
Forum.save(): `save`  is an instance method, meaning it can only be called on an object (instance) 
of the Forum class, not on the Forum class itself.

10. In the forums controller, you have a method called show:

  def show
  end

This is an action method.  It is an action method for only one reason: There is a route
that points to it.  But there's nothing in the method!  It will do the right things
because the default behavior does what is needed.  What does the default behavior
do?  How does it know which forum to show?  Whenever you have an action method, there
is a hash called params that is passed to that method.  And, in this case, the params
hash has a value, params[:id].  What is the value for this element of the hash? How
did it get there?
Ans: 
The default behavior of the show action in Rails:
- Renders the show.html.erb view associated with the action.
- Uses the params[:id] to determine which record to display.
It uses the params[:id] value to find the specific forum.
The value of params[:id] is the ID of the forum specified in the URL, such as 1 in /forums/1.
It gets in there by the route pattern in config/routes.rb and got extracted from the URL when a 
request matches the pattern, populating the params hash with :id.

