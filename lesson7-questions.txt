Questions for Lesson 7

1. What method do you put in the top of a controller so that something happens
before some or all of the controller actions execute?  Where can you put that
change so that it affects all controllers?
Ans: before_action method is put in the top of application_controller.rbt to
apply it across all controllers.


2. Consider the following statement:

bin/rails generate model subscription forum:references user:references priority:integer

This creates several files, including two you need to know about.  What are they?
After you do this statement but before starting the rails server, you have to do another
command.  What is that command?
Ans: Model file and migration needs to be known. After that, do bin/rails db:migrate to apply
the migration and create `subscriptions` table in the database


3. What table is created as a result of the migration described above? What are the column
names in that table? What is the primary key? What are the foreign keys?  What does a 
foreign key do?
Ans: `subscriptions` table is created. It will have `id`, `forum_id`, `user_id`, `priority`,
`created_at`, `updated_at` columns. `id` is the primary key. `forum_id` and `user_id` are
foreign keys. Foreign keys are used to establish a link between tables.


4. You have the following lines in the Subscription model:

belongs_to :user
belongs_to :forum

Because of this, you have several additional methods added to the Subscription class.  This means
that if you have a @subscription (an instance of Subscription), you have a couple of methods
used to refer to associated database methods.  What are those methods?  (Actually there are a few,
but there are two in particular you should know.)
Ans: 
- The `user` method to return the associcated `User` object for the @subscription. It allows you to
access the user associated with the subscription
- The `forum` method to return the associated `Forum` object for the @subscription. It allows you to
access the forum associated with the subscription


5. You have the following lines in the User model.

has_many :subscriptions
has_many :posts
has_many :forums, through: :subscriptions

What are threee important methods that are available to instances of the user model because
of these lines?
Ans: `subscriptions`, `posts`, and `forums` method

6. Suppose that user is an instance of the User class. What kind of object is returned by
user.subcriptions?  Hint: To find out, go into the Rails console for your application.
Then do:

user=User.first
subscriptions = user.subscriptions
subscriptions.class

The second call returns what looks like an empty array -- but it isn't
of the Array class. This is important, because you can do, for 
example:

new_subscription = subscriptions.new

or

new_subscription = user.subscriptions.new

Try that last line.  You will see that it creates a subscription object, but that
object is not entirely empty.  Which attribute is set? Where does it get that
value?
Ans:
`Subscription::ActiveRecord_Associations_CollectionProxy` is returned by user.subscriptions 
 Calling user.subscriptions.new creates a new Subscription object with the user_id attribute
 set to the current user's ID, establishing the relationship between the subscription and the user.

7. Suppose that user is an instance of User, and forum is an instance of Forum.  What
Active Record Statement could you use to retrieve all the user's posts for that
forum?  Hint: You need to have a where in your statement. Try this out in the console.
You will see the SQL that is executed logged to the screen.  What is that SQL?
Ans:
`user.posts.where(forum_id: forum.id)` to retrieve all the user's posts for that forum
A SQL is executed is `SELECT "posts".* FROM "posts" WHERE "posts"."user_id" = ? AND "posts"."forum_id" = ?`


8. You have the following method in your posts controller:

  def destroy
    @forum = @post.forum
    @post.destroy
    redirect_to @forum, notice: "Your post was deleted."
  end

There is a security exposure, a risk that a hacker could do damage.  What is that
risk? What two things are done in your code to prevent the risk?
Ans:
Risk: Unauthorized deletion of posts by users who do not own them.
Preventative Measures:
- Authorization Check: Ensure the user is authorized to delete the post.
- Strong Parameters: Use strong parameters to restrict the attributes that can be modified or deleted.

9. The routes for subscriptions are nested under the forum routes.  How does this
change the routes?  What is the additional hash key and value that is passed in the
params hash to the subscriptions controller as a result of this nesting? Which routes
are unaffected by the nesting?
Ans:
Routes for subscriptions are now associated with a specific forum, including the forum_id in the URL.
:forum_id is added to the params hash in the subscriptions controller.
Routes that operate independently, such as user routes, are not affected by the nesting of subscriptions under forums.



10. Every action method must do exactly one of two things -- that is, each
method may do all sorts of logic, but at the end, it has to do one of two
things, depending on the outcome of the logic.  What are those two things?
Ans:
Render or Redirect


